# EGP policy meant for path /auth/userpass/users/*
# Ensure strong password is being used
# * 8-20 characters
# * At least one lowercase letter
# * At least one uppercase letter
# * At least one number
# * At least one special character

check_password = func(password) {
  # Track total failures
  score = 0

  # 8-20 characters
  if (length(password) < 8 or length(password) > 20) {
    print("Password should be between 8 and 20 characters.")
    score += 1
  }

  # Lowercase letter
  if !(password matches "[a-z]") {
    print("Password should contain at least one lowercase letter.")
    score += 1
  }

  # Uppercase letter
  if !(password matches "[A-Z]") {
    print("Password should contain at least one uppercase letter.")
    score += 1
  }

  # Number
  if !(password matches "[0-9]") {
    print("Password should contain at least one number.")
    score += 1
  }
  
  # Special character
  if !(password matches "[\\!@#\\$%\\^&\\*\\(\\)\\-=_\\+\\[\\]{};':\",\\.\\/\\?]") {
    print("Password should contain at least one special character.")
    score += 1
  }

  return score
}

password_policy = func() {
  # Make sure there is request data
  if length(request.data else 0) is 0 {
    print("No request data")
    return false
  }

  # Make sure there is a password
  if "password" not in keys(request.data) {
    print("No password")
    return false
  }

  # Debug data
  print("DATA:", request.data)
  print("PASSWORD:", request.data.password)

  fails = check_password(request.data.password)

  if (fails > 0) {
    print(fails, "failures!")
    return false
  }

  return true
}

# Rule applies to creating/updating AWS Vault roles (uses default path)
precond = rule {
	request.operation in ["create", "update"]
}

# Main rule
main = rule when precond {
	password_policy()
}
