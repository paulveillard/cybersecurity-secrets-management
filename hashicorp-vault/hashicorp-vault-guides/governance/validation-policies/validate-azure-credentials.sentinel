# Policy that validates Azure credentials
# provided to Azure secrets engine and auth method
# For use with Vault KV v1 and v2 secrets engines

# This is intended to be used against paths of form <path>/config or
# auth/<path>/config where <path> is the path selected for the Azure secrets
# engine or auth method respectively.

# However, because EGP policies can only use wildcard (*) at the end of paths,
# We apply this policy to all paths that have the tenant_id, client_id, and
# client_secret keys which are all used by both the Azure secrets engine and
# auth method. If all 3 are present, we also check whether subscription_id is
# present and then validate it since it is used by the Azure secrets engine.

# Function that validates Azure credentials
validate_azure_creds = func() {

  # Booleans indicating whether credentials are valid
  subscription_id = true
  tenant_id = true
  client_id = true
  client_secret = true

  # Print some information about the request
  # Note that these messages will only be printed when the policy is violated
  print("Namespace path:", namespace.path)
  print("Request path:", request.path)
  print("Request data:", request.data)

  # Validate Azure credential keys of secrets

  # Test for KV v1 (using request.data)
  if "tenant_id" in keys(request.data) and "client_id" in keys(request.data) and
     "client_secret" in keys(request.data) {
    if "subscription_id" in keys(request.data) {
  		if request.data.subscription_id not matches "^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$" {
      	print("Invalid Azure subscription ID")
    		subscription_id = false
    	}
    }
    if request.data.tenant_id not matches "^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$" {
      print("Invalid Azure tenant ID")
    	tenant_id = false
    }
  	if request.data.client_id not matches "^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$" {
      print("Invalid Azure client ID")
    	client_id = false
    }
  	if request.data.client_secret not matches "^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$" {
      print("Invalid Azure client secret")
    	client_secret = false
    }
  }

  # Test for KV v2 (using request.data.data)
  if "data" in keys(request.data) and
     "tenant_id" in keys(request.data.data) and
     "client_id" in keys(request.data.data) and
     "client_secret" in keys(request.data.data) {
    if "subscription_id" in keys(request.data.data) {
  		if request.data.data.subscription_id not matches "^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$" {
      	print("Invalid Azure subscription ID")
    		subscription_id = false
    	}
    }
    if request.data.data.tenant_id not matches "^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$" {
      print("Invalid Azure tenant ID")
    	tenant_id = false
    }
  	if request.data.data.client_id not matches "^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$" {
      print("Invalid Azure client ID")
    	client_id = false
    }
  	if request.data.data.client_secret not matches "^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$" {
      print("Invalid Azure client secret")
    	client_secret = false
    }
  }

  # Return combined booleans
  return subscription_id and tenant_id and client_id and client_secret

}

# Main Rule
azure_creds_validated = validate_azure_creds()
main = rule {
  azure_creds_validated
}
